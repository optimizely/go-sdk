language: minimal
env: GO111MODULE=on
git:
  depth: false
install:
  - eval "$(gimme)"
stages:
  - 'Lint markdown files'
  - 'Lint'
  - 'Unit test'
  - 'Benchmark test'  
  - 'Integration tests'
  - 'Source clear'
  - 'Readme-sync'
jobs:
  include:
    - stage: 'Lint markdown files'
      os: linux
      language: generic
      install: gem install awesome_bot
      script:
        - find . -type f -name '*.md' -exec awesome_bot {} \;

#    - stage: 'Lint markdown files'
#      os: linux
#      language: generic
#      before_install: skip
#      install:
#        - npm i -g markdown-spellcheck
#      before_script:
#        - wget --quiet https://raw.githubusercontent.com/optimizely/mdspell-config/master/.spelling
#      script:
#        - mdspell -a -n -r --en-us '**/*.md'
#      after_success: skip

    - stage: 'Lint'
      env: GIMME_GO_VERSION=1.13.x GIMME_OS=linux GIMME_ARCH=amd64
      script:
        - make install lint

    - &test
      stage: 'Unit test'
      env: GIMME_GO_VERSION=master GIMME_OS=linux GIMME_ARCH=amd64
      script:
        - make cover

    - <<: *test
      stage: 'Unit test'
      env: GIMME_GO_VERSION=1.10.x
      before_script:
        # GO module was not introduced earlier. need symlink to search in GOPATH
        - mkdir -p $GOPATH/src/github.com && pushd $GOPATH/src/github.com && ln -s $HOME/build/optimizely optimizely && popd
      script:
        # Need to download packages explicitly
        - mkdir $GOPATH/src/github.com/twmb && cd $GOPATH/src/github.com/twmb && git clone https://github.com/twmb/murmur3.git && cd $TRAVIS_BUILD_DIR
        - pushd $GOPATH/src/github.com/twmb/murmur3 && git checkout v1.0.0 && popd
        - mkdir $GOPATH/src/github.com/hashicorp && cd $GOPATH/src/github.com/hashicorp && git clone https://github.com/hashicorp/go-multierror.git && cd $TRAVIS_BUILD_DIR
        - pushd $GOPATH/src/github.com/hashicorp/go-multierror && git checkout v1.0.0 && popd
        - mkdir $GOPATH/src/gopkg.in && cd $GOPATH/src/gopkg.in && git clone https://github.com/go-yaml/yaml.git && cd $TRAVIS_BUILD_DIR
        - mv $GOPATH/src/gopkg.in/yaml $GOPATH/src/gopkg.in/yaml.v2 && pushd $GOPATH/src/gopkg.in/yaml.v2  && git checkout v2.2.2 && popd
        - go get -v -d ./...
        # This pkg not in go 1.10
        - go get github.com/stretchr/testify
        - pushd $GOPATH/src/github.com/stretchr/testify && git checkout v1.4.0 && popd
        # -coverprofile was not introduced in 1.10
        - make test

    - <<: *test
      stage: 'Unit test'
      env: GIMME_GO_VERSION=1.14.x
      before_script:
        - go get github.com/mattn/goveralls
      after_success:
        - $GOPATH/bin/goveralls -coverprofile=profile.cov -service=travis-ci

    - stage: 'Benchmark test'
      env: GIMME_GO_VERSION=master GIMME_OS=linux GIMME_ARCH=amd64
      script:
        - make benchmark

    - stage: 'Integration tests'
      env: SDK=go SDK_BRANCH=$TRAVIS_PULL_REQUEST_BRANCH
      cache: false
      language: minimal
      install: skip
      before_script:
        - mkdir $HOME/travisci-tools && pushd $HOME/travisci-tools && git init && git pull https://$CI_USER_TOKEN@github.com/optimizely/travisci-tools.git && popd
      script:
        - $HOME/travisci-tools/trigger-script-with-status-update.sh
      after_success: travis_terminate 0
    
    - stage: 'Source clear'
      env: GIMME_GO_VERSION=master GIMME_OS=linux GIMME_ARCH=amd64
      language: go
      addons:
        srcclr: true
      script: go get -v -d ./...

    - stage: 'Readme-sync'
      name: 'run script if changes are detected in docs/'
      cache: false

      # translation: if we're merging into master branch...
      if: type = push AND branch = master

      language: node_js
      install:
        - mkdir $HOME/readme-sync2 && pushd $HOME/readme-sync2 && git init && git pull https://$CI_USER_TOKEN@github.com/optimizely/readme-sync2.git && popd
        - source ~/.nvm/nvm.sh && cd $HOME/readme-sync2 && nvm install && npm install
        # this preps the input directory for readme-sync script
        - mkdir -p $HOME/readme-sync2/docs/readme-sync/sdk-reference-guides
        # ${TRAVIS_REPO_SLUG#optimizely/} translates to go-sdk docs/readme-sync/sdk-reference-guides/go-sdk
        - ln -s $TRAVIS_BUILD_DIR/docs/readme-sync/sdk-reference-guides/${TRAVIS_REPO_SLUG#optimizely/} $HOME/readme-sync2/docs/readme-sync/sdk-reference-guides/${TRAVIS_REPO_SLUG#optimizely/}

        # now we need to get all the other *-sdk repos too
        #
        # first we list all possible sdks and inside the for loop, remove the one we are updating
        - export ALL_SDK_REPOS="android-sdk csharp-sdk go-sdk java-sdk javascript-sdk objective-c-sdk python-sdk react-sdk ruby-sdk swift-sdk"
        - mkdir $HOME/sdks && pushd $HOME/sdks && for i in ${ALL_SDK_REPOS//${TRAVIS_REPO_SLUG#optimizely/}}; do git clone https://github.com/optimizely/$i; ( [ -d "$HOME/sdks/$i/docs/readme-sync/sdk-reference-guides/$i" ] && ln -s $HOME/sdks/$i/docs/readme-sync/sdk-reference-guides/$i $HOME/readme-sync2/docs/readme-sync/sdk-reference-guides/$i ) || true; done && popd
        # check our work
        - ls -al $HOME/sdks
        - ls -al $HOME/readme-sync2/docs/readme-sync/sdk-reference-guides
      script:
        # we need to be in $TRAVIS_BUILD_DIR in order to run the following git diff properly
        - cd $TRAVIS_BUILD_DIR
        - git diff --quiet $TRAVIS_COMMIT_RANGE -- docs/readme-sync || ( cd $HOME/readme-sync2 && npx ts-node sync/index.ts --apiKey $README_SYNC_API_KEY --version 4.0 --docs docs/readme-sync/ )

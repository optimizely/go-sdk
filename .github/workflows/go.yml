name: Go

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  GO111MODULE: on

jobs:
  lint_markdown_files:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '2.6'
        bundler-cache: true # runs 'bundle install' and caches installed gems automatically
    - name: Install gem
      run: |
        gem install awesome_bot
    - name: Run tests
      run: find . -type f -name '*.md' -exec awesome_bot {} \;

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-go@v2
      with:
        go-version: '1.13.15'
    - run: make install lint

  unit_test_latest:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-go@v2
      with:
        go-version: '1.18'
        check-latest: true
    - run: make cover

  unit_test_legacy:
    runs-on: ubuntu-latest
    env: 
      BUILD_DIR: ${{ github.workspace }}
      GOPATH: ${{ github.workspace }}
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-go@v2
      with:
        go-version: '1.10.8'
    - run: |
        mkdir -p $GOPATH/src/github.com && pushd $GOPATH/src/github.com && ln -s $GOPATH optimizely/go-sdk && popd
        mkdir $GOPATH/src/github.com/twmb && cd $GOPATH/src/github.com/twmb && git clone https://github.com/twmb/murmur3.git && cd $BUILD_DIR
        pushd $GOPATH/src/github.com/twmb/murmur3 && git checkout v1.0.0 && popd
        mkdir $GOPATH/src/github.com/hashicorp && cd $GOPATH/src/github.com/hashicorp && git clone https://github.com/hashicorp/go-multierror.git && cd $BUILD_DIR
        pushd $GOPATH/src/github.com/hashicorp/go-multierror && git checkout v1.0.0 && popd
        mkdir $GOPATH/src/gopkg.in && cd $GOPATH/src/gopkg.in && git clone https://github.com/go-yaml/yaml.git && cd $BUILD_DIR
        mv $GOPATH/src/gopkg.in/yaml $GOPATH/src/gopkg.in/yaml.v2 && pushd $GOPATH/src/gopkg.in/yaml.v2  && git checkout v2.2.2 && popd
        go get -v -d ./...
        go get -d -v github.com/stretchr/testify
        pushd $GOPATH/src/github.com/stretchr/testify && git checkout v1.4.0 && popd
        make test
          
  unit_test_coverage:
    runs-on: ubuntu-latest
    env: 
      COVERALLS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-go@v2
      with:
        go-version: '1.14.15'
    - run: |
        make cover
        go get github.com/mattn/goveralls
        goveralls -coverprofile=profile.cov -service=github

  benchmark_test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-go@v2
      with:
        go-version: '1.18'
        check-latest: true
    - run: make benchmark

  integration_tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        # You should create a personal access token and store it in your repository
        token: ${{ secrets.CI_USER_TOKEN }}
        repository: 'optimizely/travisci-tools'
        path: 'home/runner/travisci-tools'
        ref: 'master'
    - name: set SDK Branch if PR
      if: ${{ github.event_name == 'pull_request' }}
      run: |
        echo "SDK_BRANCH=${{ github.head_ref }}" >> $GITHUB_ENV
        echo "TRAVIS_BRANCH=${{ github.head_ref }}" >> $GITHUB_ENV
    - name: set SDK Branch if not pull request
      if: ${{ github.event_name != 'pull_request' }}
      run: |
        echo "SDK_BRANCH=${{ github.ref_name }}" >> $GITHUB_ENV
        echo "TRAVIS_BRANCH=${{ github.ref_name }}" >> $GITHUB_ENV
    - name: Trigger build
      env:
        SDK: go
        BUILD_NUMBER: ${{ github.run_id }}
        TESTAPP_BRANCH: master
        GITHUB_TOKEN: ${{ secrets.CI_USER_TOKEN }}
        TRAVIS_EVENT_TYPE: ${{ github.event_name }}
        GITHUB_CONTEXT: ${{ toJson(github) }}
        TRAVIS_REPO_SLUG: ${{ github.repository }}
        TRAVIS_PULL_REQUEST_SLUG: ${{ github.repository }}
        UPSTREAM_REPO: ${{ github.repository }}
        TRAVIS_COMMIT: ${{ github.sha }}
        TRAVIS_PULL_REQUEST_SHA: ${{ github.event.pull_request.head.sha }}
        TRAVIS_PULL_REQUEST: ${{ github.event.pull_request.number }}
        UPSTREAM_SHA: ${{ github.sha }}
        TRAVIS_COM_TOKEN: ${{ secrets.TRAVIS_COM_TOKEN }}
        EVENT_MESSAGE: ${{ github.event.message }}
        HOME: 'home/runner'
      run: |
        echo "$GITHUB_CONTEXT"
        home/runner/travisci-tools/trigger-script-with-status-update.sh
      
  fullstack_production_suite:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        # You should create a personal access token and store it in your repository
        token: ${{ secrets.CI_USER_TOKEN }}
        repository: 'optimizely/travisci-tools'
        path: 'home/runner/travisci-tools'
        ref: 'master'
    - name: set SDK Branch if PR
      if: ${{ github.event_name == 'pull_request' }}
      run: |
        echo "SDK_BRANCH=${{ github.head_ref }}" >> $GITHUB_ENV
        echo "TRAVIS_BRANCH=${{ github.head_ref }}" >> $GITHUB_ENV
    - name: set SDK Branch if not pull request
      if: ${{ github.event_name != 'pull_request' }}
      run: |
        echo "SDK_BRANCH=${{ github.ref_name }}" >> $GITHUB_ENV
        echo "TRAVIS_BRANCH=${{ github.ref_name }}" >> $GITHUB_ENV
    - name: Trigger build
      env:
        SDK: go
        FULLSTACK_TEST_REPO: ProdTesting
        BUILD_NUMBER: ${{ github.run_id }}
        TESTAPP_BRANCH: master
        GITHUB_TOKEN: ${{ secrets.CI_USER_TOKEN }}
        TRAVIS_EVENT_TYPE: ${{ github.event_name }}
        GITHUB_CONTEXT: ${{ toJson(github) }}
        TRAVIS_REPO_SLUG: ${{ github.repository }}
        TRAVIS_PULL_REQUEST_SLUG: ${{ github.repository }}
        UPSTREAM_REPO: ${{ github.repository }}
        TRAVIS_COMMIT: ${{ github.sha }}
        TRAVIS_PULL_REQUEST_SHA: ${{ github.event.pull_request.head.sha }}
        TRAVIS_PULL_REQUEST: ${{ github.event.pull_request.number }}
        UPSTREAM_SHA: ${{ github.sha }}
        TRAVIS_COM_TOKEN: ${{ secrets.TRAVIS_COM_TOKEN }}
        EVENT_MESSAGE: ${{ github.event.message }}
        HOME: 'home/runner'
      run: |
        echo "$GITHUB_CONTEXT"
        home/runner/travisci-tools/trigger-script-with-status-update.sh
